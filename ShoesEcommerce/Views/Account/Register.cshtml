@model ShoesEcommerce.ViewModels.Account.RegisterViewModel
@{
    ViewData["Title"] = "Đăng ký tài khoản";
    var returnUrl = ViewData["ReturnUrl"] as string;
}

<style>
    /* Light (mặc định) */
    :root {
        --bg-color: #f4f6f8;
        --text-color: #222;
        --card-bg: #fff;
        --label-color: #555;
        --input-bg: #fff;
        --input-border: #ccc;
        --error-bg: #f8d7da;
        --error-text: #721c24;
        --success-bg: #d4edda;
        --success-text: #155724;
        --btn-bg: #007bff;
        --btn-hover: #0056b3;
        --btn-secondary: #6c757d;
        --btn-secondary-hover: #545b62;
    }

    /* Dark theme */
    [data-theme="dark"] {
        --bg-color: #121212;
        --text-color: #f1f1f1;
        --card-bg: #1e1e1e;
        --label-color: #ccc;
        --input-bg: #2b2b2b;
        --input-border: #444;
        --error-bg: #5f2120;
        --error-text: #f8d7da;
        --success-bg: #0f5132;
        --success-text: #d4edda;
        --btn-bg: #4a90e2;
        --btn-hover: #357abd;
        --btn-secondary: #495057;
        --btn-secondary-hover: #343a40;
    }

    * {
        transition: background-color .25s ease, color .25s ease, border-color .25s ease;
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;
        background-color: var(--bg-color);
        color: var(--text-color);
        margin: 0;
        min-height: 100vh;
    }

    .register-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 90vh;
        padding: 2rem 1rem;
    }

    .register-card {
        background-color: var(--card-bg);
        padding: 2.5rem;
        border-radius: 12px;
        width: 100%;
        max-width: 500px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
        position: relative;
    }

        .register-card h2 {
            text-align: center;
            margin-bottom: 2rem;
            font-weight: 300;
            font-size: 1.8rem;
            color: var(--text-color);
        }

    .theme-toggle {
        position: absolute;
        top: 15px;
        right: 15px;
        cursor: pointer;
        font-size: 0.9rem;
        padding: 0.3rem 0.6rem;
        border-radius: 6px;
        background-color: var(--btn-bg);
        color: white;
        border: none;
        transition: background-color 0.2s ease;
    }

        .theme-toggle:hover {
            background-color: var(--btn-hover);
        }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-row {
        display: flex;
        gap: 1rem;
    }

        .form-row .form-group {
            flex: 1;
        }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: var(--label-color);
        font-weight: 500;
        font-size: 0.9rem;
    }

    .form-control {
        width: 100%;
        padding: 0.8rem;
        border: 2px solid var(--input-border);
        border-radius: 6px;
        background-color: var(--input-bg);
        color: var(--text-color);
        font-size: 1rem;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

        .form-control:focus {
            outline: none;
            border-color: var(--btn-bg);
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
        }

        .form-control.is-invalid {
            border-color: #dc3545;
        }

        .form-control.is-valid {
            border-color: #28a745;
        }

    .text-danger {
        color: var(--error-text);
        font-size: 0.85rem;
        margin-top: 0.25rem;
        display: block;
    }

    .text-success {
        color: var(--success-text);
        font-size: 0.85rem;
        margin-top: 0.25rem;
        display: block;
    }

    .alert {
        padding: 0.8rem 1rem;
        border-radius: 6px;
        margin-bottom: 1.5rem;
        border: 1px solid transparent;
    }

    .alert-danger {
        background-color: var(--error-bg);
        color: var(--error-text);
        border-color: #f5c6cb;
    }

    .btn {
        padding: 0.8rem 1.5rem;
        border: none;
        border-radius: 6px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        text-decoration: none;
        text-align: center;
        transition: all 0.2s ease;
        display: inline-block;
        width: 100%;
    }

    .btn-primary {
        background-color: var(--btn-bg);
        color: white;
    }

        .btn-primary:hover {
            background-color: var(--btn-hover);
            color: white;
        }

    .btn-secondary {
        background-color: var(--btn-secondary);
        color: white;
    }

        .btn-secondary:hover {
            background-color: var(--btn-secondary-hover);
            color: white;
        }

    .login-link {
        text-align: center;
        margin-top: 1.5rem;
    }

        .login-link a {
            color: var(--btn-bg);
            text-decoration: none;
            font-weight: 500;
        }

            .login-link a:hover {
                color: var(--btn-hover);
                text-decoration: underline;
            }

    .checkbox-group {
        display: flex;
        align-items: flex-start;
        gap: 0.5rem;
        margin-bottom: 1.5rem;
    }

        .checkbox-group input[type="checkbox"] {
            margin: 0.2rem 0 0 0;
        }

        .checkbox-group label {
            font-size: 0.9rem;
            line-height: 1.4;
            margin: 0;
            cursor: pointer;
        }

    .password-strength {
        margin-top: 0.5rem;
        font-size: 0.8rem;
    }

    .strength-weak {
        color: #dc3545;
    }

    .strength-medium {
        color: #ffc107;
    }

    .strength-strong {
        color: #28a745;
    }

    /* Loading state */
    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .loading-text {
        display: none;
    }

    .btn:disabled .loading-text {
        display: inline;
    }

    .btn:disabled .normal-text {
        display: none;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .register-card {
            padding: 2rem;
        }

        .form-row {
            flex-direction: column;
            gap: 0;
        }
    }
</style>

<div class="register-wrapper">
    <div class="register-card">
        <button class="theme-toggle" onclick="toggleTheme()">🌓</button>

        <h2>Tạo tài khoản mới</h2>

        @* Display validation summary *@
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <strong>Vui lòng sửa các lỗi sau:</strong>
                <ul style="margin: 0.5rem 0 0 1.2rem;">
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
                @* Show detailed server error if present *@
                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="mt-2"><strong>Chi tiết lỗi:</strong> @TempData["ErrorMessage"]</div>
                }
            </div>
        }

        @* Display general error messages *@
        @if (TempData["ErrorMessage"] != null && ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <strong>Lỗi:</strong> @TempData["ErrorMessage"]
            </div>
        }

        <form method="post" asp-controller="Account" asp-action="Register" id="registerForm">
            @Html.AntiForgeryToken()
            <input type="hidden" name="returnUrl" value="@returnUrl" />

            <div class="form-row">
                <div class="form-group">
                    <label asp-for="FirstName">Họ <span style="color: red;">*</span></label>
                    <input asp-for="FirstName" class="form-control" placeholder="Nhập họ của bạn" />
                    <span asp-validation-for="FirstName" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="LastName">Tên <span style="color: red;">*</span></label>
                    <input asp-for="LastName" class="form-control" placeholder="Nhập tên của bạn" />
                    <span asp-validation-for="LastName" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group">
                <label asp-for="Email">Email <span style="color: red;">*</span></label>
                <input asp-for="Email" class="form-control" placeholder="example@email.com" type="email" />
                <span asp-validation-for="Email" class="text-danger"></span>
                <div id="emailCheck" class="text-danger" style="display: none;"></div>
            </div>

            <div class="form-group">
                <label asp-for="PhoneNumber">Số điện thoại <span style="color: red;">*</span></label>
                <input asp-for="PhoneNumber" class="form-control" placeholder="0123456789" />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                <div id="phoneCheck" class="text-danger" style="display: none;"></div>
            </div>

            <div class="form-group">
                <label asp-for="DateOfBirth">Ngày sinh <span style="color: red;">*</span></label>
                @* Đặt ngày tối đa là 13 năm trước để đảm bảo tuổi hợp lệ *@
                <input asp-for="DateOfBirth" class="form-control" type="date" min="1900-01-01" max="@DateTime.Now.AddYears(-13).ToString("yyyy-MM-dd")" />
                <span asp-validation-for="DateOfBirth" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Password">Mật khẩu <span style="color: red;">*</span></label>
                <input asp-for="Password" class="form-control" placeholder="Ít nhất 6 ký tự" type="password" id="password" />
                <span asp-validation-for="Password" class="text-danger"></span>
                <div id="passwordStrength" class="password-strength"></div>
            </div>

            <div class="form-group">
                <label asp-for="ConfirmPassword">Xác nhận mật khẩu <span style="color: red;">*</span></label>
                <input asp-for="ConfirmPassword" class="form-control" placeholder="Nhập lại mật khẩu" type="password" />
                <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
            </div>

            <div class="checkbox-group">
                <input asp-for="AcceptTerms" type="checkbox" />
                <label asp-for="AcceptTerms">
                    Tôi đồng ý với <a href="#" style="color: var(--btn-bg);">Điều khoản dịch vụ</a>
                    và <a href="#" style="color: var(--btn-bg);">Chính sách bảo mật</a> <span style="color: red;">*</span>
                </label>
            </div>
            <span asp-validation-for="AcceptTerms" class="text-danger"></span>

            <button type="submit" class="btn btn-primary" id="submitBtn">
                <span class="normal-text">Đăng ký</span>
                <span class="loading-text">Đang xử lý...</span>
            </button>

            <div class="login-link">
                Đã có tài khoản? <a asp-controller="Account" asp-action="Login" asp-route-returnUrl="@returnUrl">Đăng nhập ngay</a>
            </div>
        </form>
    </div>
</div>

<script>
    // Theme toggle
    function toggleTheme() {
        const html = document.documentElement;
        const currentTheme = html.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        html.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
    }

    // Load saved theme
    document.addEventListener('DOMContentLoaded', function() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);
    });

    // Email validation
    let emailTimeout;
    document.getElementById('Email').addEventListener('input', function() {
        clearTimeout(emailTimeout);
        const email = this.value;
        const emailCheck = document.getElementById('emailCheck');

        if (email.length > 0 && email.indexOf('@@') > -1) {
            emailTimeout = setTimeout(function() {
                fetch('/Account/CheckEmailExists', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: 'email=' + encodeURIComponent(email)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.exists) {
                        emailCheck.textContent = 'Email này đã được sử dụng';
                        emailCheck.style.display = 'block';
                        document.getElementById('Email').classList.add('is-invalid');
                    } else {
                        emailCheck.style.display = 'none';
                        document.getElementById('Email').classList.remove('is-invalid');
                        document.getElementById('Email').classList.add('is-valid');
                    }
                });
            }, 500);
        } else {
            emailCheck.style.display = 'none';
            document.getElementById('Email').classList.remove('is-invalid', 'is-valid');
        }
    });

    // Phone validation
    let phoneTimeout;
    document.getElementById('PhoneNumber').addEventListener('input', function() {
        clearTimeout(phoneTimeout);
        const phone = this.value;
        const phoneCheck = document.getElementById('phoneCheck');

        // Vietnamese phone number validation
        const vietnamesePhonePattern = /^(0[3|5|7|8|9])[0-9]{8}$/;
        const isValidVietnamesePhone = vietnamesePhonePattern.test(phone);

        if (phone.length >= 10) {
            if (!isValidVietnamesePhone) {
                phoneCheck.textContent = 'Số điện thoại phải có 10 chữ số và bắt đầu bằng 03, 05, 07, 08, hoặc 09';
                phoneCheck.style.display = 'block';
                document.getElementById('PhoneNumber').classList.add('is-invalid');
                return;
            }

            phoneTimeout = setTimeout(function() {
                fetch('/Account/CheckPhoneExists', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: 'phoneNumber=' + encodeURIComponent(phone)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.exists) {
                        phoneCheck.textContent = 'Số điện thoại này đã được sử dụng';
                        phoneCheck.style.display = 'block';
                        document.getElementById('PhoneNumber').classList.add('is-invalid');
                    } else {
                        phoneCheck.style.display = 'none';
                        document.getElementById('PhoneNumber').classList.remove('is-invalid');
                        document.getElementById('PhoneNumber').classList.add('is-valid');
                    }
                })
                .catch(error => {
                    console.error('Error checking phone:', error);
                    phoneCheck.style.display = 'none';
                });
            }, 500);
        } else {
            phoneCheck.style.display = 'none';
            document.getElementById('PhoneNumber').classList.remove('is-invalid', 'is-valid');
        }
    });

    // Password strength checker
    document.getElementById('password').addEventListener('input', function() {
        const password = this.value;
        const strengthDiv = document.getElementById('passwordStrength');

        if (password.length === 0) {
            strengthDiv.textContent = '';
            return;
        }

        let strength = 0;
        let feedback = [];

        // Length check
        if (password.length >= 8) strength += 1;
        else feedback.push('ít nhất 8 ký tự');

        // Uppercase check
        if (/[A-Z]/.test(password)) strength += 1;
        else feedback.push('1 chữ hoa');

        // Lowercase check
        if (/[a-z]/.test(password)) strength += 1;
        else feedback.push('1 chữ thường');

        // Number check
        if (/[0-9]/.test(password)) strength += 1;
        else feedback.push('1 số');

        // Special character check
        if (/[^A-Za-z0-9]/.test(password)) strength += 1;
        else feedback.push('1 ký tự đặc biệt');

        if (strength < 2) {
            strengthDiv.innerHTML = '<span class="strength-weak">Yếu - Cần: ' + feedback.join(', ') + '</span>';
        } else if (strength < 4) {
            strengthDiv.innerHTML = '<span class="strength-medium">Trung bình - Cần: ' + feedback.join(', ') + '</span>';
        } else {
            strengthDiv.innerHTML = '<span class="strength-strong">Mạnh ✓</span>';
        }
    });

    // Age validation - Improved for better date input handling
    document.getElementById('DateOfBirth').addEventListener('change', function() {
        const inputValue = this.value;
        console.log(`🔍 Date input changed: "${inputValue}"`);

        // Clear any previous custom validity first
        this.setCustomValidity('');

        if (!inputValue) {
            console.log('📝 Empty date input, will be caught by required validation');
            return; // Let the required attribute handle empty values
        }

        let birthDate;
        try {
            // HTML5 date input always returns yyyy-mm-dd format
            birthDate = new Date(inputValue + 'T00:00:00'); // Add time to avoid timezone issues
        } catch (e) {
            console.error('❌ Date parsing error:', e);
            this.setCustomValidity('Ngày sinh không hợp lệ');
            this.reportValidity();
            return;
        }

        const today = new Date();

        // Check if date parsing was successful
        if (isNaN(birthDate.getTime())) {
            console.error('❌ Invalid date parsed');
            this.setCustomValidity('Ngày sinh không hợp lệ');
            this.reportValidity();
            return;
        }

        // Check if date is in the future
        if (birthDate > today) {
            console.warn('⚠️ Future date selected');
            this.setCustomValidity('Ngày sinh không thể là ngày trong tương lai');
            this.reportValidity();
            return;
        }

        // Check if date is too old (before 1900)
        if (birthDate.getFullYear() < 1900) {
            console.warn('⚠️ Date too old');
            this.setCustomValidity('Ngày sinh không hợp lệ (trước năm 1900)');
            this.reportValidity();
            return;
        }

        // Calculate age more accurately
        let age = today.getFullYear() - birthDate.getFullYear();
        const monthDiff = today.getMonth() - birthDate.getMonth();

        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
            age--;
        }

        console.log(`🔍 Age calculated: ${age} years`);

        if (age < 13) {
            console.warn('⚠️ Age too young');
            this.setCustomValidity('Bạn phải trên 13 tuổi để đăng ký');
            this.reportValidity();
        } else if (age > 120) { // More reasonable maximum age
            console.warn('⚠️ Age too old');
            this.setCustomValidity('Tuổi không hợp lệ (trên 120 tuổi)');
            this.reportValidity();
        } else {
            console.log(`✅ Valid date and age: ${inputValue}, age: ${age}`);
            this.setCustomValidity(''); // Clear any custom validity
        }
    });

    // Also listen to input events for real-time feedback
    document.getElementById('DateOfBirth').addEventListener('input', function() {
        // Clear validation styling during input to provide better UX
        this.classList.remove('is-invalid', 'is-valid');

        const value = this.value;
        console.log(`🔄 Date input changing: "${value}"`);

        // Only show real-time validation for complete dates
        if (value && value.length === 10) { // yyyy-mm-dd format
            // Trigger change event to validate
            this.dispatchEvent(new Event('change'));
        }
    });

    // Enhanced form submission with detailed logging
    document.getElementById('registerForm').addEventListener('submit', function(e) {
        console.log('📋 Form submission started...');

        // Check all validations before submitting
        const form = this;
        const inputs = form.querySelectorAll('input[required], input[type="date"]');
        let hasErrors = false;
        const validationErrors = [];

        // Clear any existing alert
        const existingAlert = form.querySelector('.alert-danger:first-child');
        if (existingAlert && existingAlert.innerHTML.includes('Vui lòng kiểm tra')) {
            existingAlert.remove();
        }

        // Special validation for date input
        const dateInput = document.getElementById('DateOfBirth');
        const dateValue = dateInput.value;
        console.log(`🔍 Date validation: raw value="${dateValue}", parsed=${new Date(dateValue)}, valid=${dateInput.checkValidity()}`);

        if (dateValue) {
            const parsedDate = new Date(dateValue);
            const today = new Date();
            const age = today.getFullYear() - parsedDate.getFullYear();
            console.log(`🔍 Age calculation: born=${parsedDate.getFullYear()}, now=${today.getFullYear()}, age=${age}`);

            if (isNaN(parsedDate.getTime())) {
                console.error('❌ Invalid date format');
                hasErrors = true;
                validationErrors.push({
                    field: 'DateOfBirth',
                    value: dateValue,
                    validationMessage: 'Invalid date format'
                });
            }
        }

        // Check each required field and date field
        inputs.forEach(function(input) {
            const value = input.type === 'password' ? '[REDACTED]' : input.value;
            const valid = input.checkValidity();

            console.log(`Validating field: ${input.name}, value: "${value}", valid: ${valid}, customValidity: "${input.validationMessage}"`);

            if (!valid) {
                hasErrors = true;
                input.classList.add('is-invalid');
                validationErrors.push({
                    field: input.name,
                    value: value,
                    validationMessage: input.validationMessage,
                    validity: {
                        valueMissing: input.validity.valueMissing,
                        typeMismatch: input.validity.typeMismatch,
                        customError: input.validity.customError,
                        valid: input.validity.valid
                    }
                });
            } else {
                input.classList.remove('is-invalid');
            }
        });

        // Check terms acceptance
        const termsCheckbox = document.getElementById('AcceptTerms');
        console.log(`Terms accepted: ${termsCheckbox.checked}`);
        if (!termsCheckbox.checked) {
            hasErrors = true;
            termsCheckbox.classList.add('is-invalid');
            validationErrors.push({
                field: 'AcceptTerms',
                value: false,
                validationMessage: 'Terms must be accepted'
            });
        }

        // Log all validation results
        if (validationErrors.length > 0) {
            console.error('❌ Client-side validation errors:', validationErrors);
        }

        // If there are validation errors, prevent submission
        if (hasErrors) {
            e.preventDefault();
            console.log('❌ Form submission prevented due to validation errors');
            showValidationAlert('Vui lòng kiểm tra và sửa các lỗi trong form');
            return false;
        }

        console.log('✅ Client-side validation passed, submitting form...');

        // Disable submit button to prevent double submission
        const submitBtn = document.getElementById('submitBtn');
        submitBtn.disabled = true;

        // Show loading state
        submitBtn.querySelector('.normal-text').style.display = 'none';
        submitBtn.querySelector('.loading-text').style.display = 'inline';

        // Log form data being submitted (excluding sensitive fields)
        const formData = new FormData(form);
        const submissionData = {};
        for (let [key, value] of formData.entries()) {
            if (!['Password', 'ConfirmPassword', '__RequestVerificationToken'].includes(key)) {
                submissionData[key] = value;
            } else {
                submissionData[key] = '[REDACTED]';
            }
        }
        console.log('🚀 Submitting form data:', submissionData);

        // Re-enable button after a timeout in case of errors
        setTimeout(function() {
            submitBtn.disabled = false;
            submitBtn.querySelector('.normal-text').style.display = 'inline';
            submitBtn.querySelector('.loading-text').style.display = 'none';
        }, 10000); // 10 seconds timeout
    });

    // Helper function to show validation alert
    function showValidationAlert(message) {
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-danger';
        alertDiv.innerHTML = `<strong>Lỗi:</strong> ${message}`;
        alertDiv.style.marginBottom = '1rem';

        // Insert at the top of the form
        const form = document.getElementById('registerForm');
        form.insertBefore(alertDiv, form.firstChild);

        // Remove after 5 seconds
        setTimeout(function() {
            if (alertDiv.parentNode) {
                alertDiv.parentNode.removeChild(alertDiv);
            }
        }, 5000);

        // Scroll to top of form
        alertDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    // 🔧 DEBUG: Enhanced client-side debug function with date format testing
    window.debugRegistration = function() {
        console.log('🔧 DEBUG: Starting comprehensive client-side registration test...');

        const form = document.getElementById('registerForm');
        const formData = new FormData(form);

        // Get the actual date value from the form
        const dateInput = document.getElementById('DateOfBirth');
        const rawDateValue = dateInput.value;

        console.log('🔧 DEBUG: Date input analysis:', {
            rawValue: rawDateValue,
            inputType: dateInput.type,
            valueAsDate: dateInput.valueAsDate,
            formDataDate: formData.get('DateOfBirth'),
            parsedDate: rawDateValue ? new Date(rawDateValue) : null,
            isValidDate: rawDateValue ? !isNaN(new Date(rawDateValue).getTime()) : false
        });

        const testData = {
            FirstName: formData.get('FirstName') || 'Test',
            LastName: formData.get('LastName') || 'User',
            Email: formData.get('Email') || ('test' + Math.random().toString(36).substring(7) + '@@example.com'), // Random email to avoid conflicts
            PhoneNumber: formData.get('PhoneNumber') || '0901234567',
            DateOfBirth: rawDateValue || '1990-01-01', // Ensure yyyy-MM-dd format
            Password: formData.get('Password') || 'Test123!',
            ConfirmPassword: formData.get('ConfirmPassword') || 'Test123!',
            AcceptTerms: true // Force to true for testing
        };

        console.log('🔧 DEBUG: Sending test data:', testData);
        console.log('🔧 DEBUG: Date format being sent:', testData.DateOfBirth, 'Type:', typeof testData.DateOfBirth);

        // Test both the debug endpoint and actual registration
        Promise.all([
            // Test debug endpoint
            fetch('/Account/DebugRegistrationDetailed', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(testData)
            }).then(response => response.json()),

            // Test model binding directly
            fetch('/Account/DebugModel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(testData)
            }).then(response => response.json())
        ])
        .then(([debugResult, modelResult]) => {
            console.log('🔧 DEBUG: Debug registration result:', debugResult);
            console.log('🔧 DEBUG: Model binding result:', modelResult);

            // Analyze results
            const analysis = {
                debugEndpoint: {
                    success: debugResult && !debugResult.exception,
                    step: debugResult?.step || 'unknown',
                    dateOfBirth: debugResult?.inputData?.DateOfBirth,
                    dateValidation: debugResult?.inputData?.IsValidYear
                },
                modelBinding: {
                    success: modelResult && modelResult.IsValid,
                    errors: modelResult?.Errors || [],
                    modelDateOfBirth: modelResult?.Model?.DateOfBirth
                }
            };

            console.log('🔧 DEBUG: Analysis:', analysis);

            if (debugResult?.exception) {
                console.error('🔧 DEBUG: Exception occurred:', debugResult.exception);
                alert('Debug Error: ' + debugResult.exception.Message + '\n\nCheck console for detailed information.');
            } else {
                alert('Debug completed successfully!\n\n' +
                      'Debug Step: ' + (debugResult?.step || 'unknown') + '\n' +
                      'Model Valid: ' + (modelResult?.IsValid || false) + '\n' +
                      'Date Value: ' + testData.DateOfBirth + '\n\n' +
                      'Check browser console for detailed results.');
            }
        })
        .catch(error => {
            console.error('🔧 DEBUG: Network error:', error);
            alert('Debug network error: ' + error.message);
        });
    };

    // Add debug button (only in development)
    if (window.location.hostname === 'localhost') {
        const debugBtn = document.createElement('button');
        debugBtn.textContent = '🔧 Debug Registration';
        debugBtn.type = 'button';
        debugBtn.className = 'btn btn-secondary';
        debugBtn.style.marginTop = '10px';
        debugBtn.onclick = window.debugRegistration;

        const form = document.getElementById('registerForm');
        form.appendChild(debugBtn);
    }
</script>