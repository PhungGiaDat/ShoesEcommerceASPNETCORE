@model ShoesEcommerce.ViewModels.Product.ProductVariantListViewModel
@{
    ViewData["Title"] = "Tất cả sản phẩm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container py-4">
    <h2 class="text-center mb-4" style="font-weight:500; letter-spacing:0.5px;">@ViewData["Title"]</h2>

    <form method="get" asp-action="Index" asp-controller="Product" id="filterForm" class="mb-4 d-flex flex-wrap gap-3 justify-content-center align-items-end minimalist-form">
        <input type="text" class="form-control minimalist-input" id="searchString" name="searchString" value="@Model.SearchTerm" placeholder="Tên sản phẩm, màu sắc..." style="max-width:220px;">
        <select class="form-select minimalist-input" id="categoryId" name="categoryId" style="max-width:160px;">
            <option value="">Tất cả danh mục</option>
            @if (ViewBag.Categories != null)
            {
                foreach (var category in ViewBag.Categories)
                {
                    <option value="@category.Id" selected="@(Model.CategoryId == category.Id ? "selected" : null)">@category.Name</option>
                }
            }
        </select>
        <select class="form-select minimalist-input" id="brandId" name="brandId" style="max-width:160px;">
            <option value="">Tất cả thương hiệu</option>
            @if (ViewBag.Brands != null)
            {
                foreach (var brand in ViewBag.Brands)
                {
                    <option value="@brand.Id" selected="@(Model.BrandId == brand.Id ? "selected" : null)">@brand.Name</option>
                }
            }
        </select>
        <select class="form-select minimalist-input" id="priceRange" name="priceRange" style="max-width:160px;">
            <option value="">Tất cả giá</option>
            <option value="0-500000">Dưới 500K</option>
            <option value="500000-1000000">500K - 1M</option>
            <option value="1000000-2000000">1M - 2M</option>
            <option value="2000000-">Trên 2M</option>
        </select>
        <button type="submit" class="btn btn-dark minimalist-btn" style="min-width:100px;">Tìm kiếm</button>
        <a href="@Url.Action("Index", "Product")" class="btn btn-outline-dark minimalist-btn" style="min-width:100px;">Làm mới</a>
    </form>

    @if (Model.ProductVariants != null && Model.ProductVariants.Any())
    {
        <div class="row g-3">
            @foreach (var variant in Model.ProductVariants)
            {
                <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12">
                    <div class="card minimalist-card h-100">
                        <img src="@(string.IsNullOrEmpty(variant.ImageUrl) ? "/images/no-image.svg" : variant.ImageUrl)" class="card-img-top minimalist-img" alt="@variant.ProductName - @variant.Color" onerror="this.src='/images/no-image.svg'" />
                        <div class="card-body d-flex flex-column p-3">
                            <h5 class="card-title minimalist-title" title="@variant.ProductName - @variant.Color">@variant.ProductName - @variant.Color</h5>
                            <div class="mb-2 minimalist-meta">
                                <span>@variant.BrandName</span> · <span>@variant.CategoryName</span> · <span>Size: @variant.Size</span>
                            </div>
                            <div class="mb-2 minimalist-price">
                                @if (variant.HasActiveDiscount)
                                {
                                    <span class="text-decoration-line-through text-muted">@variant.Price.ToString("N0")</span>
                                    <span class="ms-2 text-danger">@variant.DiscountedPrice.ToString("N0")</span>
                                }
                                else
                                {
                                    <span>@variant.Price.ToString("N0")</span>
                                }
                            </div>
                            <div class="mt-auto d-flex gap-2">
                                <a href="@Url.Action("Details", "Product", new { id = variant.ProductId })" class="btn btn-outline-dark btn-sm w-100 minimalist-btn">Xem chi tiết</a>
                                @if (variant.IsInStock)
                                {
                                    <button type="button" class="add-to-cart-btn btn btn-dark btn-sm w-100 minimalist-btn" data-variant-id="@variant.Id">Thêm vào giỏ</button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-secondary btn-sm w-100 minimalist-btn" disabled>Hết hàng</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        @if (Model.TotalPages > 1)
        {
            <nav class="mt-4" aria-label="Variant pagination">
                <ul class="pagination justify-content-center minimalist-pagination">
                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link minimalist-page-link" href="@Url.Action("Index", "Product", new { page = i, searchString = Model.SearchTerm, categoryId = Model.CategoryId, brandId = Model.BrandId })">@i</a>
                        </li>
                    }
                </ul>
            </nav>
        }
    }
    else
    {
        <div class="text-center py-5 text-muted minimalist-empty">
            <i class="fas fa-cube fa-3x mb-3"></i>
            <h4>Không tìm thấy sản phẩm nào</h4>
            <p>Hãy thử thay đổi bộ lọc hoặc từ khóa tìm kiếm!</p>
            <a href="@Url.Action("Index", "Product")" class="btn btn-outline-dark minimalist-btn mt-2">Xóa bộ lọc</a>
        </div>
    }
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show position-fixed minimalist-alert" role="alert">
        <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show position-fixed minimalist-alert" role="alert">
        <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<style>
    .minimalist-form {
        gap: 1rem;
    }

    .minimalist-input {
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        background: #fafafa;
        font-size: 1rem;
    }

    .minimalist-btn {
        border-radius: 8px;
        font-weight: 500;
    }

    .minimalist-card {
        border-radius: 12px;
        border: 1px solid #e0e0e0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        background: #fff;
        transition: box-shadow 0.2s;
    }

        .minimalist-card:hover {
            box-shadow: 0 8px 24px rgba(0,0,0,0.08);
        }

    .minimalist-img {
        border-radius: 12px 12px 0 0;
        height: 180px;
        object-fit: cover;
        background: #f4f4f4;
    }

    .minimalist-title {
        font-size: 1.05rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #222;
    }

    .minimalist-meta {
        font-size: 0.95rem;
        color: #888;
        margin-bottom: 0.5rem;
    }

    .minimalist-price {
        font-size: 1.1rem;
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .minimalist-stock {
        font-size: 0.95rem;
        margin-bottom: 0.5rem;
    }

    .minimalist-pagination .page-link {
        border-radius: 6px;
        color: #222;
        border: 1px solid #e0e0e0;
    }

    .minimalist-pagination .active .page-link {
        background: #222;
        color: #fff;
        border-color: #222;
    }

    .minimalist-page-link:hover {
        background: #f4f4f4;
        color: #222;
    }

    .minimalist-empty {
        color: #888;
    }

    .minimalist-alert {
        top: 20px;
        right: 20px;
        z-index: 1050;
        min-width: 220px;
    }
</style>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(function() {
            var alerts = document.querySelectorAll('.alert');
            alerts.forEach(function(alert) {
                var bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 4000);
        document.querySelectorAll('.add-to-cart-btn').forEach(function(button) {
            button.addEventListener('click', function() {
                var variantId = this.getAttribute('data-variant-id');
                var originalText = this.innerHTML;
                this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang thêm...';
                this.disabled = true;
                fetch('/Cart/AddToCart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ productVariantId: parseInt(variantId) })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('Đã thêm sản phẩm vào giỏ hàng!', 'success');
                        var cartCount = document.querySelector('.cart-count');
                        if (cartCount && data.cartItemCount) {
                            cartCount.textContent = data.cartItemCount;
                        }
                    } else {
                        showToast(data.message || 'Có lỗi xảy ra khi thêm sản phẩm vào giỏ!', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Có lỗi xảy ra khi thêm sản phẩm vào giỏ!', 'error');
                })
                .finally(() => {
                    this.innerHTML = originalText;
                    this.disabled = false;
                });
            });
        });
        var filterForm = document.getElementById('filterForm');
        var categoryFilter = document.getElementById('categoryId');
        var brandFilter = document.getElementById('brandId');
        var priceRangeFilter = document.getElementById('priceRange');
        if (categoryFilter) { categoryFilter.addEventListener('change', function() { filterForm.submit(); }); }
        if (brandFilter) { brandFilter.addEventListener('change', function() { filterForm.submit(); }); }
        if (priceRangeFilter) { priceRangeFilter.addEventListener('change', function() { filterForm.submit(); }); }
    });
    function showToast(message, type) {
        const toast = document.createElement('div');
        toast.style.cssText = `position: fixed; top: 2rem; right: 2rem; z-index: 1000; background: ${type === 'success' ? '#28a745' : '#dc3545'}; color: white; padding: 1rem 1.5rem; border-radius: 0.5rem; font-size: 0.875rem; font-weight: 500; transform: translateX(100%); transition: transform 0.3s ease; max-width: 300px; box-shadow: 0 4px 15px rgba(0,0,0,0.2);`;
        toast.innerHTML = message;
        document.body.appendChild(toast);
        setTimeout(() => { toast.style.transform = 'translateX(0)'; }, 100);
        setTimeout(() => { toast.style.transform = 'translateX(100%)'; setTimeout(() => { document.body.removeChild(toast); }, 300); }, 3000);
    }
</script>