@model ShoesEcommerce.Models.Products.Product

@{
    ViewData["Title"] = Model.Name;
    var variants = ViewBag.Variants as IEnumerable<ShoesEcommerce.ViewModels.Product.ProductVariantInfo>;
    var discountInfo = ViewBag.DiscountInfo as ShoesEcommerce.Services.Interfaces.ProductDiscountInfo;
}

<!-- Add anti-forgery token for AJAX requests -->
@Html.AntiForgeryToken()

<!-- Minimalist Product Details Page -->
<div class="minimal-container">
    <!-- Page Header -->
    <div class="page-header">
        <h1 class="page-title">Chi tiết sản phẩm</h1>
    </div>

    <!-- Product Content -->
    <div class="product-container">
        <!-- Product Images -->
        <div class="product-images">
            @{
                var mainImage = variants?.FirstOrDefault()?.ImageUrl ?? "/images/no-image.svg";
            }
            <div class="main-product-image">
                <img id="mainProductImage" 
                     src="@mainImage" 
                     alt="@Model.Name" 
                     onerror="this.src='/images/no-image.svg'" />
            </div>
            
            <!-- Thumbnail Gallery -->
            @if (variants != null && variants.Any())
            {
                <div class="thumbnail-gallery">
                    @foreach (var variant in variants.Where(v => !string.IsNullOrEmpty(v.ImageUrl)).Take(4))
                    {
                        <div class="thumbnail-item">
                            <img src="@variant.ImageUrl" 
                                 alt="@variant.Color - @variant.Size" 
                                 onclick="changeMainImage('@variant.ImageUrl')"
                                 onerror="this.style.display='none'" />
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Product Information -->
        <div class="product-info">
            <!-- Product Title -->
            <h1 class="product-title">@Model.Name.ToUpper()</h1>
            
            <!-- Product Code & Status -->
            <div class="product-meta">
                <div class="product-code">
                    Mã sản phẩm: <span class="code-text">@Model.Name.ToLower().Replace(" ", "")</span>
                </div>
                
                <div class="product-status">
                    <span class="status-label">Tình trạng:</span>
                    @if (variants != null && variants.Any(v => v.StockQuantity > 0))
                    {
                        @if (discountInfo != null && discountInfo.HasActiveDiscount)
                        {
                            <span class="status-discount">Sale</span>
                        }
                        else
                        {
                            <span class="status-new">New Arrival</span>
                        }
                    }
                    else
                    {
                        <span class="status-out">Hết hàng</span>
                    }
                </div>
            </div>

            <!-- Price Section -->
            <div class="price-section">
                @if (variants != null && variants.Any())
                {
                    var minPrice = variants.Min(v => v.Price);
                    var maxPrice = variants.Max(v => v.Price);
                    
                    @if (discountInfo != null && discountInfo.HasActiveDiscount)
                    {
                        <div class="price-original">
                            @if (minPrice == maxPrice)
                            {
                                @minPrice.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))
                            }
                            else
                            {
                                <text>@minPrice.ToString("C0", new System.Globalization.CultureInfo("vi-VN")) - @maxPrice.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</text>
                            }
                        </div>
                        <div class="price-current">
                            @discountInfo.DiscountedPrice.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))
                        </div>
                    }
                    else
                    {
                        <div class="price-current">
                            @if (minPrice == maxPrice)
                            {
                                @minPrice.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))
                            }
                            else
                            {
                                <text>@minPrice.ToString("C0", new System.Globalization.CultureInfo("vi-VN")) - @maxPrice.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</text>
                            }
                        </div>
                    }
                }
                else
                {
                    <div class="price-unavailable">Liên hệ để biết giá</div>
                }
            </div>

            <!-- Product Options -->
            @if (variants != null && variants.Any())
            {
                <div class="product-options">
                    <!-- Color Selection -->
                    @{
                        var colors = variants.Select(v => v.Color).Distinct().ToList();
                    }
                    @if (colors.Count > 1)
                    {
                        <div class="option-group">
                            <label class="option-label">Màu sắc</label>
                            <div class="color-options">
                                @foreach (var color in colors)
                                {
                                    <div class="color-option" data-color="@color">
                                        <input type="radio" class="color-input" name="selectedColor" id="color-@color" value="@color" autocomplete="off">
                                        <label class="color-label" for="color-@color">
                                            <span class="color-swatch"></span>
                                            <span class="color-name">@color</span>
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    <!-- Size Selection -->
                    @{
                        var sizes = variants.Select(v => v.Size).Distinct().ToList();
                    }
                    @if (sizes.Count > 1)
                    {
                        <div class="option-group">
                            <label class="option-label">SIZE</label>
                            <div class="size-dropdown">
                                <select class="size-select" name="selectedSize">
                                    <option value="">Chọn size</option>
                                    @foreach (var size in sizes)
                                    {
                                        <option value="@size">@size</option>
                                    }
                                </select>
                            </div>
                        </div>
                    }

                    <!-- Quantity -->
                    <div class="option-group">
                        <label class="option-label">SỐ LƯỢNG</label>
                        <div class="quantity-selector">
                            <input type="number" class="quantity-input" value="1" min="1" max="10">
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="product-actions">
                    <button class="btn-add-cart" onclick="addToCartFromOptions()">
                        THÊM VÀO GIỎ HÀNG
                    </button>
                    <button class="btn-checkout">
                        THANH TOÁN
                    </button>
                </div>

                <!-- Available Variants (Hidden Table for Functionality) -->
                <div class="variants-data" style="display: none;">
                    @foreach (var variant in variants)
                    {
                        <div class="variant-item" 
                             data-variant-id="@variant.Id"
                             data-color="@variant.Color"
                             data-size="@variant.Size"
                             data-price="@variant.Price"
                             data-stock="@variant.StockQuantity">
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-variants">
                    <p>Sản phẩm này hiện chưa có biến thể nào.</p>
                    <p>Vui lòng quay lại sau.</p>
                </div>
            }
        </div>
    </div>

    <!-- Product Reviews Section (Simplified) -->
    @if (Model.Comments != null && Model.Comments.Any())
    {
        <div class="reviews-section">
            <h3 class="reviews-title">Đánh giá sản phẩm</h3>
            <div class="reviews-list">
                @foreach (var comment in Model.Comments.Take(3))
                {
                    <div class="review-item">
                        <div class="review-header">
                            <span class="review-author">Khách hàng</span>
                            <span class="review-date">@comment.CreatedAt.ToString("dd/MM/yyyy")</span>
                        </div>
                        <div class="review-content">@comment.Content</div>
                        @if (comment.Rating > 0)
                        {
                            <div class="review-rating">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    @if (i <= comment.Rating)
                                    {
                                        <span class="star-filled">★</span>
                                    }
                                    else
                                    {
                                        <span class="star-empty">☆</span>
                                    }
                                }
                                <span class="rating-text">(@comment.Rating/5)</span>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Ultra Minimalist Styles -->
<style>
    :root {
        --color-black: #000000;
        --color-white: #ffffff;
        --color-gray-100: #f8f8f8;
        --color-gray-200: #e8e8e8;
        --color-gray-300: #d1d1d1;
        --color-gray-400: #a8a8a8;
        --color-gray-500: #737373;
        --color-gray-600: #525252;
        --color-gray-700: #404040;
        --color-gray-800: #262626;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;
        color: var(--color-gray-800);
        line-height: 1.5;
        background: var(--color-white);
        font-size: 14px;
    }

    /* Container */
    .minimal-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }

    /* Page Header */
    .page-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .page-title {
        font-size: 1.5rem;
        font-weight: 300;
        color: var(--color-black);
        letter-spacing: 1px;
        text-transform: uppercase;
    }

    /* Product Container */
    .product-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 4rem;
        margin-bottom: 4rem;
    }

    /* Product Images */
    .product-images {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .main-product-image {
        background: var(--color-gray-100);
        border-radius: 4px;
        overflow: hidden;
        aspect-ratio: 4/3;
    }

    .main-product-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .thumbnail-gallery {
        display: flex;
        gap: 0.75rem;
        justify-content: flex-start;
    }

    .thumbnail-item {
        width: 80px;
        height: 80px;
        background: var(--color-gray-100);
        border-radius: 4px;
        overflow: hidden;
        cursor: pointer;
        transition: opacity 0.2s ease;
    }

    .thumbnail-item:hover {
        opacity: 0.8;
    }

    .thumbnail-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    /* Product Information */
    .product-info {
        padding-top: 1rem;
    }

    .product-title {
        font-size: 2rem;
        font-weight: 300;
        color: var(--color-black);
        margin-bottom: 1.5rem;
        letter-spacing: -1px;
    }

    .product-meta {
        margin-bottom: 2rem;
    }

    .product-code {
        font-size: 0.9rem;
        color: var(--color-gray-600);
        margin-bottom: 0.75rem;
    }

    .code-text {
        font-weight: 500;
    }

    .product-status {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .status-label {
        font-size: 0.9rem;
        color: var(--color-gray-600);
    }

    .status-new,
    .status-discount {
        background: var(--color-black);
        color: var(--color-white);
        padding: 0.25rem 0.75rem;
        border-radius: 2px;
        font-size: 0.75rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .status-discount {
        background: #dc3545;
    }

    .status-out {
        color: #dc3545;
        font-weight: 500;
    }

    /* Price Section */
    .price-section {
        margin-bottom: 2.5rem;
    }

    .price-original {
        font-size: 1.1rem;
        color: var(--color-gray-500);
        text-decoration: line-through;
        margin-bottom: 0.5rem;
    }

    .price-current {
        font-size: 1.75rem;
        font-weight: 500;
        color: var(--color-black);
    }

    .price-unavailable {
        font-size: 1.1rem;
        color: var(--color-gray-600);
        font-style: italic;
    }

    /* Product Options */
    .product-options {
        margin-bottom: 2.5rem;
    }

    .option-group {
        margin-bottom: 2rem;
    }

    .option-label {
        display: block;
        font-size: 0.9rem;
        color: var(--color-gray-700);
        margin-bottom: 0.75rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    /* Color Options */
    .color-options {
        display: flex;
        gap: 1rem;
    }

    .color-option {
        position: relative;
    }

    .color-input {
        position: absolute;
        opacity: 0;
        pointer-events: none;
    }

    .color-label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1rem;
        border: 1px solid var(--color-gray-300);
        background: var(--color-white);
        cursor: pointer;
        transition: all 0.2s ease;
        border-radius: 2px;
    }

    .color-label:hover,
    .color-input:checked + .color-label {
        border-color: var(--color-black);
        background: var(--color-black);
        color: var(--color-white);
    }

    .color-swatch {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: var(--color-gray-400);
    }

    .color-name {
        font-size: 0.85rem;
        font-weight: 400;
    }

    /* Size & Quantity */
    .size-select,
    .quantity-input {
        width: 100%;
        max-width: 200px;
        padding: 0.75rem;
        border: 1px solid var(--color-gray-300);
        background: var(--color-white);
        font-size: 0.9rem;
        border-radius: 2px;
        outline: none;
        transition: border-color 0.2s ease;
    }

    .size-select:focus,
    .quantity-input:focus {
        border-color: var(--color-black);
    }

    /* Action Buttons */
    .product-actions {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .btn-add-cart,
    .btn-checkout {
        width: 100%;
        padding: 1rem;
        font-size: 0.9rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 1px;
        border: none;
        cursor: pointer;
        transition: all 0.2s ease;
        border-radius: 2px;
    }

    .btn-add-cart {
        background: var(--color-white);
        color: var(--color-black);
        border: 1px solid var(--color-black);
    }

    .btn-add-cart:hover {
        background: var(--color-black);
        color: var(--color-white);
    }

    .btn-checkout {
        background: var(--color-black);
        color: var(--color-white);
    }

    .btn-checkout:hover {
        background: var(--color-gray-800);
    }

    /* No Variants */
    .no-variants {
        text-align: center;
        padding: 3rem 0;
        color: var(--color-gray-600);
    }

    .no-variants p {
        margin-bottom: 0.5rem;
    }

    /* Reviews Section */
    .reviews-section {
        border-top: 1px solid var(--color-gray-200);
        padding-top: 3rem;
        margin-top: 3rem;
    }

    .reviews-title {
        font-size: 1.3rem;
        font-weight: 300;
        color: var(--color-black);
        margin-bottom: 2rem;
        text-align: center;
    }

    .review-item {
        border-bottom: 1px solid var(--color-gray-200);
        padding: 1.5rem 0;
    }

    .review-item:last-child {
        border-bottom: none;
    }

    .review-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
    }

    .review-author {
        font-weight: 500;
        color: var(--color-black);
    }

    .review-date {
        font-size: 0.85rem;
        color: var(--color-gray-500);
    }

    .review-content {
        color: var(--color-gray-700);
        margin-bottom: 0.75rem;
        line-height: 1.6;
    }

    .review-rating {
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .star-filled {
        color: #ffc107;
        font-size: 1rem;
    }

    .star-empty {
        color: var(--color-gray-300);
        font-size: 1rem;
    }

    .rating-text {
        font-size: 0.85rem;
        color: var(--color-gray-600);
        margin-left: 0.5rem;
    }

    /* Responsive Design */
</style>

<style>
    @@media (max-width: 768px) {
        .minimal-container {
            padding: 1rem;
        }

        .product-container {
            grid-template-columns: 1fr;
            gap: 2rem;
        }

        .product-title {
            font-size: 1.5rem;
        }

        .price-current {
            font-size: 1.5rem;
        }

        .thumbnail-gallery {
            justify-content: center;
        }

        .color-options {
            flex-wrap: wrap;
        }

        .product-actions {
            margin-top: 2rem;
        }
    }

    @@media (max-width: 480px) {
        .thumbnail-item {
            width: 60px;
            height: 60px;
        }

        .product-title {
            font-size: 1.25rem;
        }

        .price-current {
            font-size: 1.25rem;
        }
    }
</style>

<!-- Minimal JavaScript -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Change main image when clicking thumbnails
    window.changeMainImage = function(imageSrc) {
        const mainImg = document.getElementById('mainProductImage');
        if (mainImg) {
            mainImg.src = imageSrc;
        }
    };

    // Add to cart from options
    window.addToCartFromOptions = function() {
        const selectedColor = document.querySelector('input[name="selectedColor"]:checked')?.value;
        const selectedSize = document.querySelector('select[name="selectedSize"]')?.value;
        const quantity = document.querySelector('.quantity-input')?.value || 1;

        // Find matching variant
        const variants = document.querySelectorAll('.variant-item');
        let selectedVariant = null;

        for (let variant of variants) {
            const variantColor = variant.getAttribute('data-color');
            const variantSize = variant.getAttribute('data-size');
            
            if ((!selectedColor || variantColor === selectedColor) && 
                (!selectedSize || variantSize === selectedSize)) {
                selectedVariant = variant;
                break;
            }
        }

        if (selectedVariant) {
            const variantId = selectedVariant.getAttribute('data-variant-id');
            const stock = parseInt(selectedVariant.getAttribute('data-stock'));
            
            if (stock > 0) {
                addToCart(variantId, quantity);
            } else {
                showNotification('Sản phẩm này hiện đã hết hàng', 'error');
            }
        } else {
            showNotification('Vui lòng chọn đầy đủ các tùy chọn sản phẩm', 'warning');
        }
    };

    // Add to cart function
    function addToCart(variantId, quantity = 1) {
        const button = document.querySelector('.btn-add-cart');
        const originalText = button.textContent;
        
        // Show loading state
        button.textContent = 'ĐANG THÊM...';
        button.disabled = true;

        // Create form data
        const formData = new FormData();
        formData.append('productVariantId', variantId);

        // Get anti-forgery token
        const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
        if (tokenInput) {
            formData.append('__RequestVerificationToken', tokenInput.value);
        }

        // Make API call
        fetch('/Cart/AddToCart', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (response.ok) {
                return response.text().then(text => {
                    // Check if response is HTML (redirect) or JSON
                    try {
                        return JSON.parse(text);
                    } catch {
                        // If it's HTML, it means redirect to cart - success!
                        return { success: true };
                    }
                });
            } else {
                return response.json();
            }
        })
        .then(data => {
            if (data.success !== false) {
                showNotification('Đã thêm sản phẩm vào giỏ hàng!', 'success');
                
                // Optional: redirect to cart after 1 second
                setTimeout(() => {
                    window.location.href = '/Cart';
                }, 1000);
            } else {
                showNotification(data.message || 'Có lỗi xảy ra khi thêm sản phẩm vào giỏ', 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('Có lỗi xảy ra khi thêm sản phẩm vao giỏ', 'error');
        })
        .finally(() => {
            // Restore button state
            button.textContent = originalText;
            button.disabled = false;
        });
    }

    // Show notification
    function showNotification(message, type) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 2rem;
            right: 2rem;
            z-index: 1000;
            background: ${type === 'success' ? 'var(--color-black)' : type === 'error' ? '#dc3545' : '#ffc107'};
            color: ${type === 'warning' ? 'var(--color-black)' : 'var(--color-white)'};
            padding: 1rem 1.5rem;
            border-radius: 2px;
            font-size: 0.9rem;
            font-weight: 500;
            max-width: 300px;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }
});
</script>
